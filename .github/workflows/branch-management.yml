name: Branch Management

on:
  schedule:
    # ÊØèÂ§©ÂáåÊô®2ÁÇπËøêË°å
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'cleanup'
        type: choice
        options:
          - cleanup
          - report
      dry_run:
        description: 'Dry run mode (no actual changes)'
        required: false
        default: false
        type: boolean

jobs:
  branch-cleanup:
    name: Branch Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'cleanup')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install PyGithub

      - name: Run branch cleanup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: ${{ github.event.inputs.dry_run || false }}
        run: |
          python scripts/branch-cleanup.py

  branch-report:
    name: Branch Report
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'report'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Generate branch report
        run: |
          python scripts/branch-report.py

      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: branch-report
          path: branch-report.md

  notify-team:
    name: Notify Team
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    needs: [branch-cleanup, branch-report]

    steps:
      - name: Create issue for cleanup summary
        if: needs.branch-cleanup.result == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;

            // ÂàõÂª∫Ê∏ÖÁêÜÊëòË¶ÅÈóÆÈ¢ò
            await github.rest.issues.create({
              owner,
              repo,
              title: `Branch Cleanup Report - ${new Date().toISOString().split('T')[0]}`,
              body: `## üßπ Branch Cleanup Summary

            ### Summary
            - **Date**: ${new Date().toISOString().split('T')[0]}
            - **Total branches checked**: [TODO]
            - **Branches cleaned**: [TODO]
            - **Branches remaining**: [TODO]

            ### Actions Taken
            - [ ] Merged feature branches
            - [ ] Deleted stale branches
            - [ ] Updated branch protection rules

            ### Recommendations
            - [ ] Review branch naming conventions
            - [ ] Update team documentation
            - [ ] Schedule next cleanup

            ---
            *This is an automated report generated by the branch management workflow.*

            **Next cleanup**: Scheduled for ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}`,
              labels: ['automation', 'branch-management'],
              assignees: ['${{ github.actor }}']
            });
